//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DALEntityEF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProjectScreenAppEntities : DbContext
    {
        public ProjectScreenAppEntities()
            : base("name=ProjectScreenAppEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddProject> AddProjects { get; set; }
        public virtual DbSet<AddUser> AddUsers { get; set; }
    
        public virtual int CreateProject(string projectName, Nullable<System.DateTime> projectStartDate, Nullable<System.DateTime> projectEndDate, Nullable<int> projectPriority, string empID)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectStartDateParameter = projectStartDate.HasValue ?
                new ObjectParameter("ProjectStartDate", projectStartDate) :
                new ObjectParameter("ProjectStartDate", typeof(System.DateTime));
    
            var projectEndDateParameter = projectEndDate.HasValue ?
                new ObjectParameter("ProjectEndDate", projectEndDate) :
                new ObjectParameter("ProjectEndDate", typeof(System.DateTime));
    
            var projectPriorityParameter = projectPriority.HasValue ?
                new ObjectParameter("ProjectPriority", projectPriority) :
                new ObjectParameter("ProjectPriority", typeof(int));
    
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateProject", projectNameParameter, projectStartDateParameter, projectEndDateParameter, projectPriorityParameter, empIDParameter);
        }
    
        public virtual int CreateUser(string empId, string firstName, string lastName)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateUser", empIdParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int DeleteProject(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProject", idParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", idParameter);
        }
    
        public virtual ObjectResult<DisplayAllProjects_Result> DisplayAllProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayAllProjects_Result>("DisplayAllProjects");
        }
    
        public virtual ObjectResult<DisplayAllUsers_Result> DisplayAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayAllUsers_Result>("DisplayAllUsers");
        }
    
        public virtual ObjectResult<DisplayById_Result> DisplayById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayById_Result>("DisplayById", idParameter);
        }
    
        public virtual ObjectResult<DisplayProjectByID_Result> DisplayProjectByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayProjectByID_Result>("DisplayProjectByID", idParameter);
        }
    
        public virtual int UpdateProject(Nullable<int> id, string projectName, Nullable<System.DateTime> projectStartDate, Nullable<System.DateTime> projectEndDate, Nullable<int> projectPriority, string empID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectStartDateParameter = projectStartDate.HasValue ?
                new ObjectParameter("ProjectStartDate", projectStartDate) :
                new ObjectParameter("ProjectStartDate", typeof(System.DateTime));
    
            var projectEndDateParameter = projectEndDate.HasValue ?
                new ObjectParameter("ProjectEndDate", projectEndDate) :
                new ObjectParameter("ProjectEndDate", typeof(System.DateTime));
    
            var projectPriorityParameter = projectPriority.HasValue ?
                new ObjectParameter("ProjectPriority", projectPriority) :
                new ObjectParameter("ProjectPriority", typeof(int));
    
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProject", idParameter, projectNameParameter, projectStartDateParameter, projectEndDateParameter, projectPriorityParameter, empIDParameter);
        }
    
        public virtual int UpdateProject1(Nullable<int> id, string projectName, Nullable<System.DateTime> projectStartDate, Nullable<System.DateTime> projectEndDate, Nullable<int> projectPriority, string empID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectStartDateParameter = projectStartDate.HasValue ?
                new ObjectParameter("ProjectStartDate", projectStartDate) :
                new ObjectParameter("ProjectStartDate", typeof(System.DateTime));
    
            var projectEndDateParameter = projectEndDate.HasValue ?
                new ObjectParameter("ProjectEndDate", projectEndDate) :
                new ObjectParameter("ProjectEndDate", typeof(System.DateTime));
    
            var projectPriorityParameter = projectPriority.HasValue ?
                new ObjectParameter("ProjectPriority", projectPriority) :
                new ObjectParameter("ProjectPriority", typeof(int));
    
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProject1", idParameter, projectNameParameter, projectStartDateParameter, projectEndDateParameter, projectPriorityParameter, empIDParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> id, string empId, string firstName, string lastName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", idParameter, empIdParameter, firstNameParameter, lastNameParameter);
        }

        public System.Data.Entity.DbSet<DALEntityEF.DisplayAllUsers_Result> DisplayAllUsers_Result { get; set; }
    }
}
